Index: PlantState.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n*  @file PlantState.cpp\r\n *\r\n * @brief Contains function definitions for the PlantState functions defined in PlantState.h\r\n */\r\n\r\n#include \"PlantState.h\"\r\n#include \"Plant.h\"\r\n#include <iostream>\r\n\r\n\r\n/*!\r\n * @brief Basic constructor for PlantState class\r\n */\r\nPlantState::PlantState() {\r\n\r\n}\r\n\r\n/*!\r\n * @brief Basic destructor for PlantState class\r\n */\r\nPlantState::~PlantState() {\r\n\r\n}\r\n\r\n\r\n//################################################\r\n\r\n/*!\r\n * @brief Determines which state change should occur, if any, according to Plant->health\r\n *\r\n * Plant object can progress to GrowingState, or be removed from the system due to failed care\r\n * Called after any plant care function is executed\r\n *\r\n * @param plant Plant object for which the state is being checked (and perhaps changed)\r\n */\r\nvoid SeedingState::handleCare(Plant *plant) {\r\n    int hp = plant->getHealth();\r\n    if (hp >= 2) {\r\n        //go to GrowingState\r\n        plant->changeState(new GrowingState);\r\n    } else if (hp < 0) {\r\n        cout << \"Plant \" + plant->getID() + \" has died.\\n\";\r\n        plant->changeState(new DeadState);\r\n    }\r\n}\r\n\r\n/*!\r\n * @return \"Seeding\"\r\n */\r\nstring SeedingState::getStateName() {\r\n    return \"Seeding\";\r\n}\r\n\r\n\r\n//################################################\r\n\r\n/*!\r\n * @brief Determines which state change should occur, if any, according to Plant->health\r\n *\r\n * Plant object can progress to MatureState, or regress to MoultState\r\n * Called after any plant care function is executed\r\n *\r\n * @param plant Plant object for which the state is being checked (and perhaps changed)\r\n */\r\nvoid GrowingState::handleCare(Plant* plant) {\r\n    int hp = plant->getHealth();\r\n    if (hp <=1) {\r\n        //go to moult state\r\n        plant->changeState(new MoultState);\r\n    } else if (hp >= 4) {\r\n        //go to matureState\r\n        plant->changeState(new MatureState);\r\n    }\r\n}\r\n\r\n/*!\r\n * @return \"Growing\"\r\n */\r\nstring GrowingState::getStateName() {\r\n    return \"Growing\";\r\n}\r\n\r\n\r\n//################################################\r\n\r\n/*!\r\n * @brief Determines which state change should occur, if any, according to Plant->health\r\n *\r\n * Plant object can regress to MoultState, or be removed from the system due to sale\r\n * Called after any plant care function is executed\r\n *\r\n * @param plant Plant object for which the state is being checked (and perhaps changed)\r\n */\r\nvoid MatureState::handleCare(Plant* plant) {\r\n    int hp = plant->getHealth();\r\n    if (hp <= 2) {\r\n        //go to MoultState\r\n        plant->changeState(new MoultState);\r\n    }\r\n}\r\n\r\n/*!\r\n * @return \"Matured\"\r\n */\r\nstring MatureState::getStateName() {\r\n    return \"Matured\";\r\n}\r\n\r\n\r\n//################################################\r\n\r\n/*!\r\n * @brief Determines which state change should occur, if any, according to Plant->health\r\n *\r\n * Plant object can progress back to GrowingState, or be removed from the system due to failed care\r\n * Called after any plant care function is executed\r\n *\r\n * @param plant Plant object for which the state is being checked (and perhaps changed)\r\n */\r\nvoid MoultState::handleCare(Plant* plant) {\r\n    int hp = plant->getHealth();\r\n    if (hp <= 0) {\r\n        //plant has died\r\n        cout << \"Plant \" + plant->getID() + \" has died.\\n\";\r\n        plant->changeState(new DeadState);\r\n    } else if (hp >= 3) {\r\n        //go to growing state\r\n        plant->changeState(new GrowingState);\r\n    }\r\n}\r\n\r\n/*!\r\n * @return \"Moulting\"\r\n */\r\nstring MoultState::getStateName() {\r\n    return \"Moulting\";\r\n}\r\n\r\n//################################################\r\n\r\n/*!\r\n * @brief Placeholder function for dead plants that must be removed from system\r\n *\r\n * Exists to avoid errors that may be caused by attempting to care for a dead plant\r\n *\r\n * @param plant Plant object for which the state is being checked\r\n */\r\nvoid DeadState::handleCare(Plant *plant) {\r\n    cout << \"Dead\\n\";\r\n}\r\n\r\n/*!\r\n * @return \"Dead\"\r\n */\r\nstring DeadState::getStateName() {\r\n    return \"Dead\";\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PlantState.cpp b/PlantState.cpp
--- a/PlantState.cpp	(revision 45e627315197d865b005ed8ff75a9b66303cee57)
+++ b/PlantState.cpp	(date 1761308518111)
@@ -71,6 +71,7 @@
     } else if (hp >= 4) {
         //go to matureState
         plant->changeState(new MatureState);
+        ////////
     }
 }
 
